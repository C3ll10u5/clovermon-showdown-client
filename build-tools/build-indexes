#!/usr/bin/env node
'use strict';

const fs = require("fs");
const path = require('path');
const child_process = require("child_process");

const rootDir = path.resolve(__dirname, '..');
process.chdir(rootDir);

if (!fs.existsSync('data/clovermon-showdown')) {
	child_process.execSync('git clone https://github.com/showderp/clovermon-showdown.git', {
		cwd: 'data',
	});
}

process.stdout.write("Syncing data from Git repository... ");
child_process.execSync('git pull', {cwd: 'data/clovermon-showdown'});
child_process.execSync('npm run build', {cwd: 'data/clovermon-showdown'});
console.log("DONE");

const Dex = require('../data/clovermon-showdown/.sim-dist/dex').Dex;
const Tags = require('../data/clovermon-showdown/.data-dist/tags').Tags;
const toID = Dex.toID;
process.stdout.write("Loading gen 6 data... ");
Dex.includeData();
console.log("DONE");

function es3stringify(obj) {
	const buf = JSON.stringify(obj);
	return buf.replace(/\"([A-Za-z][A-Za-z0-9]*)\"\:/g, (fullMatch, key) => (
		['return', 'new', 'delete'].includes(key) ? fullMatch : `${key}:`
	));
}

function requireNoCache(pathSpec) {
	delete require.cache[require.resolve(pathSpec)];
	return require(pathSpec);
}

/*********************************************************
 * Build search-index.js
 *********************************************************/

{
	process.stdout.write("Building `data/search-index.js`... ");

	let index = [];

	index = index.concat(Object.keys(Dex.data.Pokedex).map(x => x + ' pokemon'));
	index = index.concat(Object.keys(Dex.data.Moves).map(x => x + ' move'));
	index = index.concat(Object.keys(Dex.data.Items).map(x => x + ' item'));
	index = index.concat(Object.keys(Dex.data.Abilities).map(x => x + ' ability'));
	index = index.concat(Object.keys(Dex.data.TypeChart).map(x => toID(x) + ' type'));
	index = index.concat(['physical', 'special', 'status'].map(x => toID(x) + ' category'));
	index = index.concat(['monster', 'water1', 'bug', 'flying', 'field', 'fairy', 'grass', 'humanlike', 'water3', 'mineral', 'amorphous', 'water2', 'ditto', 'dragon', 'undiscovered'].map(x => toID(x) + ' egggroup'));
	index = index.concat(['ou', 'uu', 'ru', 'nu', 'pu', 'lc', 'nfe', 'uber', 'uubl', 'rubl', 'nubl', 'publ', 'cap', 'caplc', 'capnfe'].map(x => toID(x) + ' tier'));

	let BattleArticleTitles = {};

	try {
		for (const file of fs.readdirSync('../dex.pokemonshowdown.com/articles/')) {
			if (file.endsWith('.md')) {
				const id = file.slice(0, -3);
				const contents = '' + fs.readFileSync('../dex.pokemonshowdown.com/articles/' + file);
				if (contents.startsWith('# ')) {
					const title = contents.slice(2, contents.indexOf('\n'));
					if (title !== id.charAt(0).toUpperCase() + id.slice(1)) {
						BattleArticleTitles[id] = title;
					}
				}
				index.push('' + id + ' article');
			}
		}
	} catch (e) {
		console.log('\n(WARNING: NO ARTICLES)');
	}
	index.push('pokemon article');
	index.push('moves article');

	// generate aliases
	function generateAlias(id, name, type) {
		let i = name.lastIndexOf(' ');
		if (i < 0) i = name.lastIndexOf('-');
		if (name.endsWith('-Mega-X') || name.endsWith('-Mega-Y')) {
			index.push('mega' + toID(name.slice(0, -7) + name.slice(-1)) + ' ' + type + ' ' + id + ' 0');
			index.push('m' + toID(name.slice(0, -7) + name.slice(-1)) + ' ' + type + ' ' + id + ' 0');
			index.push('mega' + toID(name.slice(-1)) + ' ' + type + ' ' + id + ' ' + toID(name.slice(0, -7)).length);
			return;
		}
		if (name.endsWith('-Mega')) {
			index.push('mega' + toID(name.slice(0, -5)) + ' ' + type + ' ' + id + ' 0');
			index.push('m' + toID(name.slice(0, -5)) + ' ' + type + ' ' + id + ' 0');
			return;
		}
		if (name.endsWith('-Alola')) {
			index.push('alolan' + toID(name.slice(0, -6)) + ' ' + type + ' ' + id + ' 0');
			return;
		}
		let oldI = i;
		if (name === 'Alakazam') i = 5;
		if (name === 'Arctovish') i = 5;
		if (name === 'Arctozolt') i = 5;
		if (name === 'Articuno') i = 5;
		if (name === 'Breloom') i = 3;
		if (name === 'Bronzong') i = 4;
		if (name === 'Celebi') i = 4;
		if (name === 'Charizard') i = 5;
		if (name === 'Donphan') i = 3;
		if (name === 'Dracovish') i = 5;
		if (name === 'Dracozolt') i = 5;
		if (name === 'Dragapult') i = 5;
		if (name === 'Dusclops') i = 3;
		if (name === 'Electabuzz') i = 6;
		if (name === 'Exeggutor') i = 2;
		if (name === 'Garchomp') i = 3;
		if (name === 'Hariyama') i = 4;
		if (name === 'Magearna') i = 2;
		if (name === 'Magnezone') i = 5;
		if (name === 'Mamoswine') i = 4;
		if (name === 'Moltres') i = 3;
		if (name === 'Nidoking') i = 4;
		if (name === 'Nidoqueen') i = 4;
		if (name === 'Nidorina') i = 4;
		if (name === 'Nidorino') i = 4;
		if (name === 'Regice') i = 3;
		if (name === 'Regidrago') i = 4;
		if (name === 'Regieleki') i = 4;
		if (name === 'Regigigas') i = 4;
		if (name === 'Regirock') i = 4;
		if (name === 'Registeel') i = 4;
		if (name === 'Slowbro') i = 4;
		if (name === 'Slowking') i = 4;
		if (name === 'Starmie') i = 4;
		if (name === 'Tyranitar') i = 6;
		if (name === 'Zapdos') i = 3;

		if (name === 'Acupressure') i = 3;
		if (name === 'Aromatherapy') i = 5;
		if (name === 'Boomburst') i = 4;
		if (name === 'Crabhammer') i = 4;
		if (name === 'Discharge') i = 3;
		if (name === 'Earthquake') i = 5;
		if (name === 'Extrasensory') i = 5;
		if (name === 'Flamethrower') i = 5;
		if (name === 'Headbutt') i = 4;
		if (name === 'Moonblast') i = 4;
		if (name === 'Moonlight') i = 4;
		if (name === 'Overheat') i = 4;
		if (name === 'Outrage') i = 3;
		if (name === 'Octazooka') i = 4;
		if (name === 'Payback') i = 3;
		if (name === 'Psyshock') i = 3;
		if (name === 'Psywave') i = 3;
		if (name === 'Rototiller') i = 4;
		if (name === 'Rollout') i = 4;
		if (name === 'Safeguard') i = 4;
		if (name === 'Sandstorm') i = 4;
		if (name === 'Smokescreen') i = 5;
		if (name === 'Stockpile') i = 5;
		if (name === 'Steamroller') i = 5;
		if (name === 'Superpower') i = 5;
		if (name === 'Supersonic') i = 5;
		if (name === 'Synchronoise') i = 7;
		if (name === 'Tailwind') i = 4;
		if (name === 'Telekinesis') i = 4;
		if (name === 'Teleport') i = 4;
		if (name === 'Thunderbolt') i = 7;
		if (name === 'Twineedle') i = 3;
		if (name === 'Uproar') i = 2;
		if (name === 'Venoshock') i = 4;
		if (name === 'Whirlpool') i = 5;
		if (name === 'Whirlwind') i = 5;
		let acronym;
		if (oldI < 0 && i > 0) {
			acronym = toID(name.charAt(0) + name.slice(i));
		}
		if (i < 0) return;
		index.push('' + toID(name.slice(i)) + ' ' + type + ' ' + id + ' ' + toID(name.slice(0, i)).length);
		if (name.startsWith('Hidden Power ')) {
			acronym = 'hp' + toID(name.substr(13));
			index.push('' + acronym + ' ' + type + ' ' + id + ' 0');
		} else if (name === 'Hidden Power') {
			index.push('hp ' + type + ' ' + id + ' 0');
		} else if (name.includes(' ')) {
			acronym = toID(name.split(' ').map((x, i) => i !== 0 ? x : x.charAt(0)).join(''));
		} else if (name.includes('-') && name.charAt(1) !== '-') {
			acronym = toID(name.split('-').map((x, i) => i !== 0 ? x : x.charAt(0)).join(''));
		}
		if (acronym) {
			index.push('' + acronym + ' ' + type + ' ' + id + ' 0');
		}
		if (name === 'High Jump Kick') {
			index.push('hjkick ' + type + ' ' + id + ' 0');
		} else if (name === 'Wake-Up Slap') {
			index.push('wuslap ' + type + ' ' + id + ' 0');
			index.push('wupslap ' + type + ' ' + id + ' 0');
		} else if (name === 'Zen Headbutt') {
			index.push('zhbutt ' + type + ' ' + id + ' 0');
		} else if (name === 'Articuno') {
			index.push('cuno ' + type + ' ' + id + ' 4');
		}

		let i2 = name.lastIndexOf(' ', i - 1);
		if (i2 < 0) i2 = name.lastIndexOf('-', i - 1);
		if (name === 'Zen Headbutt') i2 = 8;
		if (i2 >= 0) {
			index.push('' + toID(name.slice(i2)) + ' ' + type + ' ' + id + ' ' + toID(name.slice(0, i2)).length);
		}
	}
	for (const id in Dex.data.Pokedex) {
		const name = Dex.data.Pokedex[id].name;
		generateAlias(id, name, 'pokemon');
	}
	for (const id in Dex.data.Moves) {
		const name = Dex.data.Moves[id].name;
		generateAlias(id, name, 'move');
	}
	for (const id in Dex.data.Items) {
		const name = Dex.data.Items[id].name;
		generateAlias(id, name, 'item');
	}
	for (const id in Dex.data.Abilities) {
		const name = Dex.data.Abilities[id].name;
		generateAlias(id, name, 'ability');
	}

	index.sort();

	// manually rearrange
	index[index.indexOf('grass type')] = 'grass egggroup';
	index[index.indexOf('grass egggroup')] = 'grass type';

	index[index.indexOf('fairy type')] = 'fairy egggroup';
	index[index.indexOf('fairy egggroup')] = 'fairy type';

	index[index.indexOf('flying type')] = 'flying egggroup';
	index[index.indexOf('flying egggroup')] = 'flying type';

	index[index.indexOf('dragon type')] = 'dragon egggroup';
	index[index.indexOf('dragon egggroup')] = 'dragon type';

	index[index.indexOf('bug type')] = 'bug egggroup';
	index[index.indexOf('bug egggroup')] = 'bug type';

	index[index.indexOf('psychic type')] = 'psychic move';
	index[index.indexOf('psychic move')] = 'psychic type';

	index[index.indexOf('ditto pokemon')] = 'ditto egggroup';
	index[index.indexOf('ditto egggroup')] = 'ditto pokemon';


	let BattleSearchIndex = index.map(x => {
		x = x.split(' ');
		if (x.length > 3) {
			x[3] = Number(x[3]);
			x[2] = index.indexOf(x[2] + ' ' + x[1]);
		}
		return x;
	});

	let BattleSearchIndexOffset = BattleSearchIndex.map((entry, i) => {
		const id = entry[0];
		let name = '';
		switch (entry[1]) {
		case 'pokemon': name = Dex.species.get(id).name; break;
		case 'move': name = Dex.moves.get(id).name; break;
		case 'item': name = Dex.items.get(id).name; break;
		case 'ability': name = Dex.abilities.get(id).name; break;
		case 'article': name = BattleArticleTitles[id] || ''; break;
		}
		let res = '';
		let nonAlnum = 0;
		for (let i = 0, j = 0; i < id.length; i++, j++) {
			while (!/[a-zA-Z0-9]/.test(name[j])) {
				j++;
				nonAlnum++;
			}
			res += nonAlnum;
		}
		if (nonAlnum) return res;
		return '';
	});

	let BattleSearchCountIndex = {};
	for (const type in Dex.data.TypeChart) {
		BattleSearchCountIndex[type + ' move'] = Object.keys(Dex.data.Moves).filter(id => (Dex.data.Moves[id].type === type)).length;
	}

	for (const type in Dex.data.TypeChart) {
		BattleSearchCountIndex[type + ' pokemon'] = Object.keys(Dex.data.Pokedex).filter(id => (Dex.data.Pokedex[id].types.indexOf(type) >= 0)).length;
	}

	let buf = '// DO NOT EDIT - automatically built with build-tools/build-indexes\n\n';

	buf += 'exports.BattleSearchIndex = ' + JSON.stringify(BattleSearchIndex) + ';\n\n';

	buf += 'exports.BattleSearchIndexOffset = ' + JSON.stringify(BattleSearchIndexOffset) + ';\n\n';

	buf += 'exports.BattleSearchCountIndex = ' + JSON.stringify(BattleSearchCountIndex) + ';\n\n';

	buf += 'exports.BattleArticleTitles = ' + JSON.stringify(BattleArticleTitles) + ';\n\n';

	fs.writeFileSync('data/search-index.js', buf);
}

/*********************************************************
 * Build battle-icons.js
 *********************************************************/

process.stdout.write("Building `data/battle-icons.js`... ");

{
	const BattlePokemonIconIndexes = {
		egg: 900 + 1,
		pikachubelle: 900 + 2,
		pikachulibre: 900 + 3,
		pikachuphd: 900 + 4,
		pikachupopstar: 900 + 5,
		pikachurockstar: 900 + 6,
		pikachucosplay: 900 + 7,
		unownexclamation: 900 + 8,
		unownquestion: 900 + 9,
		unownb: 900 + 10,
		unownc: 900 + 11,
		unownd: 900 + 12,
		unowne: 900 + 13,
		unownf: 900 + 14,
		unowng: 900 + 15,
		unownh: 900 + 16,
		unowni: 900 + 17,
		unownj: 900 + 18,
		unownk: 900 + 19,
		unownl: 900 + 20,
		unownm: 900 + 21,
		unownn: 900 + 22,
		unowno: 900 + 23,
		unownp: 900 + 24,
		unownq: 900 + 25,
		unownr: 900 + 26,
		unowns: 900 + 27,
		unownt: 900 + 28,
		unownu: 900 + 29,
		unownv: 900 + 30,
		unownw: 900 + 31,
		unownx: 900 + 32,
		unowny: 900 + 33,
		unownz: 900 + 34,
		castformrainy: 900 + 35,
		castformsnowy: 900 + 36,
		castformsunny: 900 + 37,
		deoxysattack: 900 + 38,
		deoxysdefense: 900 + 39,
		deoxysspeed: 900 + 40,
		burmysandy: 900 + 41,
		burmytrash: 900 + 42,
		wormadamsandy: 900 + 43,
		wormadamtrash: 900 + 44,
		cherrimsunshine: 900 + 45,
		shelloseast: 900 + 46,
		gastrodoneast: 900 + 47,
		rotomfan: 900 + 48,
		rotomfrost: 900 + 49,
		rotomheat: 900 + 50,
		rotommow: 900 + 51,
		rotomwash: 900 + 52,
		giratinaorigin: 900 + 53,
		shayminsky: 900 + 54,
		unfezantf: 900 + 55,
		basculinbluestriped: 900 + 56,
		darmanitanzen: 900 + 57,
		deerlingautumn: 900 + 58,
		deerlingsummer: 900 + 59,
		deerlingwinter: 900 + 60,
		sawsbuckautumn: 900 + 61,
		sawsbucksummer: 900 + 62,
		sawsbuckwinter: 900 + 63,
		frillishf: 900 + 64,
		jellicentf: 900 + 65,
		tornadustherian: 900 + 66,
		thundurustherian: 900 + 67,
		landorustherian: 900 + 68,
		kyuremblack: 900 + 69,
		kyuremwhite: 900 + 70,
		keldeoresolute: 900 + 71,
		meloettapirouette: 900 + 72,
		vivillonarchipelago: 900 + 73,
		vivilloncontinental: 900 + 74,
		vivillonelegant: 900 + 75,
		vivillonfancy: 900 + 76,
		vivillongarden: 900 + 77,
		vivillonhighplains: 900 + 78,
		vivillonicysnow: 900 + 79,
		vivillonjungle: 900 + 80,
		vivillonmarine: 900 + 81,
		vivillonmodern: 900 + 82,
		vivillonmonsoon: 900 + 83,
		vivillonocean: 900 + 84,
		vivillonpokeball: 900 + 85,
		vivillonpolar: 900 + 86,
		vivillonriver: 900 + 87,
		vivillonsandstorm: 900 + 88,
		vivillonsavanna: 900 + 89,
		vivillonsun: 900 + 90,
		vivillontundra: 900 + 91,
		pyroarf: 900 + 92,
		flabebeblue: 900 + 93,
		flabebeorange: 900 + 94,
		flabebewhite: 900 + 95,
		flabebeyellow: 900 + 96,
		floetteblue: 900 + 97,
		floetteeternal: 900 + 98,
		floetteorange: 900 + 99,
		floettewhite: 900 + 100,
		floetteyellow: 900 + 101,
		florgesblue: 900 + 102,
		florgesorange: 900 + 103,
		florgeswhite: 900 + 104,
		florgesyellow: 900 + 105,
		furfroudandy: 900 + 106,
		furfroudebutante: 900 + 107,
		furfroudiamond: 900 + 108,
		furfrouheart: 900 + 109,
		furfroukabuki: 900 + 110,
		furfroulareine: 900 + 111,
		furfroumatron: 900 + 112,
		furfroupharaoh: 900 + 113,
		furfroustar: 900 + 114,
		meowsticf: 900 + 115,
		aegislashblade: 900 + 116,
		xerneasneutral: 900 + 117,
		hoopaunbound: 900 + 118,
		rattataalola: 900 + 119,
		raticatealola: 900 + 120,
		raichualola: 900 + 121,
		sandshrewalola: 900 + 122,
		sandslashalola: 900 + 123,
		vulpixalola: 900 + 124,
		ninetalesalola: 900 + 125,
		diglettalola: 900 + 126,
		dugtrioalola: 900 + 127,
		meowthalola: 900 + 128,
		persianalola: 900 + 129,
		geodudealola: 900 + 130,
		graveleralola: 900 + 131,
		golemalola: 900 + 132,
		grimeralola: 900 + 133,
		mukalola: 900 + 134,
		exeggutoralola: 900 + 135,
		marowakalola: 900 + 136,
		greninjaash: 900 + 137,
		zygarde10: 900 + 138,
		zygardecomplete: 900 + 139,
		oricoriopompom: 900 + 140,
		oricoriopau: 900 + 141,
		oricoriosensu: 900 + 142,
		lycanrocmidnight: 900 + 143,
		wishiwashischool: 900 + 144,
		miniormeteor: 900 + 145,
		miniororange: 900 + 146,
		minioryellow: 900 + 147,
		miniorgreen: 900 + 148,
		miniorblue: 900 + 149,
		miniorindigo: 900 + 150,
		miniorviolet: 900 + 151,
		magearnaoriginal: 900 + 152,
		pikachuoriginal: 900 + 153,
		pikachuhoenn: 900 + 154,
		pikachusinnoh: 900 + 155,
		pikachuunova: 900 + 156,
		pikachukalos: 900 + 157,
		pikachualola: 900 + 158,
		pikachupartner: 900 + 159,
		lycanrocdusk: 900 + 160,
		necrozmaduskmane: 900 + 161,
		necrozmadawnwings: 900 + 162,
		necrozmaultra: 900 + 163,
		pikachustarter: 900 + 164,
		eeveestarter: 900 + 165,
		meowthgalar: 900 + 166,
		ponytagalar: 900 + 167,
		rapidashgalar: 900 + 168,
		farfetchdgalar: 900 + 169,
		weezinggalar: 900 + 170,
		mrmimegalar: 900 + 171,
		corsolagalar: 900 + 172,
		zigzagoongalar: 900 + 173,
		linoonegalar: 900 + 174,
		darumakagalar: 900 + 175,
		darmanitangalar: 900 + 176,
		darmanitangalarzen: 900 + 177,
		yamaskgalar: 900 + 178,
		stunfiskgalar: 900 + 179,
		cramorantgulping: 900 + 180,
		cramorantgorging: 900 + 181,
		toxtricitylowkey: 900 + 182,
		sinisteaantique: 854,
		polteageistantique: 855,
		alcremierubycream: 900 + 183,
		alcremiematchacream: 900 + 184,
		alcremiemintcream: 900 + 185,
		alcremielemoncream: 900 + 186,
		alcremiesaltedcream: 900 + 187,
		alcremierubyswirl: 900 + 188,
		alcremiecaramelswirl: 900 + 189,
		alcremierainbowswirl: 900 + 190,
		eiscuenoice: 900 + 191,
		indeedeef: 900 + 192,
		morpekohangry: 900 + 193,
		zaciancrowned: 900 + 194,
		zamazentacrowned: 900 + 195,
		slowpokegalar: 900 + 196,
		slowbrogalar: 900 + 197,
		zarudedada: 900 + 198,
		pikachuworld: 900 + 199,
		articunogalar: 900 + 200,
		zapdosgalar: 900 + 201,
		moltresgalar: 900 + 202,
		slowkinggalar: 900 + 203,
		calyrexice: 900 + 204,
		calyrexshadow: 900 + 205,
	
		gumshoostotem: 735,
		raticatealolatotem: 900 + 120,
		marowakalolatotem: 900 + 136,
		araquanidtotem: 752,
		lurantistotem: 754,
		salazzletotem: 758,
		vikavolttotem: 738,
		togedemarutotem: 777,
		mimikyutotem: 778,
		mimikyubustedtotem: 778,
		ribombeetotem: 743,
		kommoototem: 784,
	
		venusaurmega: 1116 + 0,
		charizardmegax: 1116 + 1,
		charizardmegay: 1116 + 2,
		blastoisemega: 1116 + 3,
		beedrillmega: 1116 + 4,
		pidgeotmega: 1116 + 5,
		alakazammega: 1116 + 6,
		slowbromega: 1116 + 7,
		gengarmega: 1116 + 8,
		kangaskhanmega: 1116 + 9,
		pinsirmega: 1116 + 10,
		gyaradosmega: 1116 + 11,
		aerodactylmega: 1116 + 12,
		mewtwomegax: 1116 + 13,
		mewtwomegay: 1116 + 14,
		ampharosmega: 1116 + 15,
		steelixmega: 1116 + 16,
		scizormega: 1116 + 17,
		heracrossmega: 1116 + 18,
		houndoommega: 1116 + 19,
		tyranitarmega: 1116 + 20,
		sceptilemega: 1116 + 21,
		blazikenmega: 1116 + 22,
		swampertmega: 1116 + 23,
		gardevoirmega: 1116 + 24,
		sableyemega: 1116 + 25,
		mawilemega: 1116 + 26,
		aggronmega: 1116 + 27,
		medichammega: 1116 + 28,
		manectricmega: 1116 + 29,
		sharpedomega: 1116 + 30,
		cameruptmega: 1116 + 31,
		altariamega: 1116 + 32,
		banettemega: 1116 + 33,
		absolmega: 1116 + 34,
		glaliemega: 1116 + 35,
		salamencemega: 1116 + 36,
		metagrossmega: 1116 + 37,
		latiasmega: 1116 + 38,
		latiosmega: 1116 + 39,
		kyogreprimal: 1116 + 40,
		groudonprimal: 1116 + 41,
		rayquazamega: 1116 + 42,
		lopunnymega: 1116 + 43,
		garchompmega: 1116 + 44,
		lucariomega: 1116 + 45,
		abomasnowmega: 1116 + 46,
		gallademega: 1116 + 47,
		audinomega: 1116 + 48,
		dianciemega: 1116 + 49,
		charizardgmax: 1116 + 50,
		butterfreegmax: 1116 + 51,
		pikachugmax: 1116 + 52,
		meowthgmax: 1116 + 53,
		machampgmax: 1116 + 54,
		gengargmax: 1116 + 55,
		kinglergmax: 1116 + 56,
		laprasgmax: 1116 + 57,
		eeveegmax: 1116 + 58,
		snorlaxgmax: 1116 + 59,
		garbodorgmax: 1116 + 60,
		melmetalgmax: 1116 + 61,
		corviknightgmax: 1116 + 62,
		orbeetlegmax: 1116 + 63,
		drednawgmax: 1116 + 64,
		coalossalgmax: 1116 + 65,
		flapplegmax: 1116 + 66,
		appletungmax: 1116 + 67,
		sandacondagmax: 1116 + 68,
		toxtricitygmax: 1116 + 69,
		toxtricitylowkeygmax: 1116 + 69,
		centiskorchgmax: 1116 + 70,
		hatterenegmax: 1116 + 71,
		grimmsnarlgmax: 1116 + 72,
		alcremiegmax: 1116 + 73,
		copperajahgmax: 1116 + 74,
		duraludongmax: 1116 + 75,
		eternatuseternamax: 1116 + 76,
		venusaurgmax: 1116 + 77,
		blastoisegmax: 1116 + 78,
		rillaboomgmax: 1116 + 79,
		cinderacegmax: 1116 + 80,
		inteleongmax: 1116 + 81,
		urshifugmax: 1116 + 82,
		urshifurapidstrikegmax: 1116 + 83,
	
		syclant: 1308 + 0,
		revenankh: 1308 + 1,
		pyroak: 1308 + 2,
		fidgit: 1308 + 3,
		stratagem: 1308 + 4,
		arghonaut: 1308 + 5,
		kitsunoh: 1308 + 6,
		cyclohm: 1308 + 7,
		colossoil: 1308 + 8,
		krilowatt: 1308 + 9,
		voodoom: 1308 + 10,
		tomohawk: 1308 + 11,
		necturna: 1308 + 12,
		mollux: 1308 + 13,
		aurumoth: 1308 + 14,
		malaconda: 1308 + 15,
		cawmodore: 1308 + 16,
		volkraken: 1308 + 17,
		plasmanta: 1308 + 18,
		naviathan: 1308 + 19,
		crucibelle: 1308 + 20,
		crucibellemega: 1308 + 21,
		kerfluffle: 1308 + 22,
		pajantom: 1308 + 23,
		jumbao: 1308 + 24,
		caribolt: 1308 + 25,
		smokomodo: 1308 + 26,
		snaelstrom: 1308 + 27,
		equilibra: 1308 + 28,
		astrolotl: 1308 + 29,
		miasmaw: 1308 + 30,
		chromera: 1308 + 31,
	
		syclar: 1344 + 0,
		embirch: 1344 + 1,
		flarelm: 1344 + 2,
		breezi: 1344 + 3,
		scratchet: 1344 + 4,
		necturine: 1344 + 5,
		cupra: 1344 + 6,
		argalis: 1344 + 7,
		brattler: 1344 + 8,
		cawdet: 1344 + 9,
		volkritter: 1344 + 10,
		snugglow: 1344 + 11,
		floatoy: 1344 + 12,
		caimanoe: 1344 + 13,
		pluffle: 1344 + 14,
		rebble: 1344 + 15,
		tactite: 1344 + 16,
		privatyke: 1344 + 17,
		nohface: 1344 + 18,
		monohm: 1344 + 19,
		duohm: 1344 + 20,
		// protowatt: 1344 + 21,
		voodoll: 1344 + 22,
		mumbao: 1344 + 23,
		fawnifer: 1344 + 24,
		electrelk: 1344 + 25,
		smogecko: 1344 + 26,
		smoguana: 1344 + 27,
		swirlpool: 1344 + 28,
		coribalis: 1344 + 29,
		justyke: 1344 + 30,
		solotl: 1344 + 31,
		miasmite: 1344 + 32,
	
		// Clover
		fontabaa: 1379 + (33 * 12) + 1,
		fontabab: 1379 + (33 * 12) + 2,
		fontabac: 1379 + (33 * 12) + 3,
		fontabaco: 1379 + (33 * 12) + 4,
		fontabad: 1379 + (33 * 12) + 5,
		fontabaf: 1379 + (33 * 12) + 6,
		fontabafa: 1379 + (33 * 12) + 7,
		fontabafit: 1379 + (33 * 12) + 8,
		fontabag: 1379 + (33 * 12) + 9,
		fontabah: 1379 + (33 * 12) + 10,
		fontabaint: 1379 + (33 * 12) + 11,
		fontabajp: 1379 + (33 * 12) + 12,
		fontabak: 1379 + (33 * 12) + 13,
		fontabaout: 1379 + (33 * 12) + 14,
		fontabapol: 1379 + (33 * 12) + 15,
		fontabar9k: 1379 + (33 * 12) + 16,
		fontabas: 1379 + (33 * 12) + 17,
		fontabas4s: 1379 + (33 * 12) + 18,
		fontabasoc: 1379 + (33 * 12) + 19,
		fontabasp: 1379 + (33 * 12) + 20,
		fontabatrv: 1379 + (33 * 12) + 21,
		fontabatv: 1379 + (33 * 12) + 22,
		fontabav: 1379 + (33 * 12) + 23,
		fontabavg: 1379 + (33 * 12) + 24,
		fontabavp: 1379 + (33 * 12) + 25,
		fontabavr: 1379 + (33 * 12) + 26,
		fontabax: 1379 + (33 * 12) + 27,
		fontabaz: 1379 + (33 * 12) + 28,
	
		// CAP Formes
		jerminswarm: 1379 + (52 * 12) + 1,
		skubaanti: 1379 + (52 * 12) + 2,
		disbearyebil: 1379 + (52 * 12) + 3,
		gargarramerawoken: 1379 + (52 * 12) + 4,
	
		// Blobbos CAP
		blobboshenesys: 1379 + (53 * 12) + 1,
		blobbosnega: 1379 + (53 * 12) + 2,
		blobbosreverse: 1379 + (53 * 12) + 3,
		blobbosgalar: 1379 + (53 * 12) + 4,
		blobbosvalian: 1379 + (53 * 12) + 5,
		blobbosdouble: 1379 + (53 * 12) + 6,
		bootlos: 1379 + (53 * 12) + 7,
		blobbosunova: 1379 + (53 * 12) + 8,
		blobbosshining: 1379 + (53 * 12) + 9,
		blobbosmagic: 1379 + (53 * 12) + 10,
		blobbosultra: 1379 + (53 * 12) + 11,
		blobbosking: 1379 + (53 * 12) + 12,
		blobbosangel: 1379 + (53 * 12) + 13,
		blobbosnonfungible: 1379 + (53 * 12) + 14,
		blobbosnice: 1379 + (53 * 12) + 15,
		blobbosalola: 1379 + (53 * 12) + 16,
		blobbosarceus: 1379 + (53 * 12) + 17,
		blobboschad: 1379 + (53 * 12) + 18,
		blobbosgnome: 1379 + (53 * 12) + 19,
		blobbosmini: 1379 + (53 * 12) + 20,
		blobbosdust: 1379 + (53 * 12) + 21,
		blobbostherian: 1379 + (53 * 12) + 22,
		blobbospostmodern: 1379 + (53 * 12) + 23,
		blobbosfnaf: 1379 + (53 * 12) + 24,
		blobbostrips: 1379 + (53 * 12) + 25,
		blobbosbirb: 1379 + (53 * 12) + 26,
		blobbosathlete: 1379 + (53 * 12) + 27,
		blobbosgay: 1379 + (53 * 12) + 28,
		blobbosmountain: 1379 + (53 * 12) + 29,
		blobbospika: 1379 + (53 * 12) + 30,
		blobboschef: 1379 + (53 * 12) + 31,
		blobbosmexican: 1379 + (53 * 12) + 32,
		blobbosfish: 1379 + (53 * 12) + 33,
		blobbospizza: 1379 + (53 * 12) + 34,
		blobbosnightmare: 1379 + (53 * 12) + 35,
		blobboshoenn: 1379 + (53 * 12) + 36,
		blobboskirby: 1379 + (53 * 12) + 37,
		blobbosjackolantern: 1379 + (53 * 12) + 38,
		blobboseggdog: 1379 + (53 * 12) + 39,
		blobbosmetal: 1379 + (53 * 12) + 40,
		blobbosadesign: 1379 + (53 * 12) + 41,
		blobbosexplosion: 1379 + (53 * 12) + 42,
		blobboskalos: 1379 + (53 * 12) + 43,
		blobbosmega: 1379 + (53 * 12) + 44,
		blobboselectric: 1379 + (53 * 12) + 45,
		blobbosomori: 1379 + (53 * 12) + 46,
		blobbossneed: 1379 + (53 * 12) + 47,
		blobbossus: 1379 + (53 * 12) + 48,
		blobbostandor: 1379 + (53 * 12) + 49,
		blobbosayylien: 1379 + (53 * 12) + 50,
		blobbosmimikyu: 1379 + (53 * 12) + 51,
		blobbosbloody: 1379 + (53 * 12) + 52,
		blobboscandycorn: 1379 + (53 * 12) + 53,
		blobboscreature: 1379 + (53 * 12) + 54,
		blobbosdrowned: 1379 + (53 * 12) + 55,
		blobbosexe: 1379 + (53 * 12) + 56,
		blobboseye: 1379 + (53 * 12) + 57,
		blobbosinfected: 1379 + (53 * 12) + 58,
		blobbosmoniker: 1379 + (53 * 12) + 59,
		blobbosmummy: 1379 + (53 * 12) + 60,
		blobbosshadow: 1379 + (53 * 12) + 61,
		blobbosskeleton: 1379 + (53 * 12) + 62,
		blobbosspooky: 1379 + (53 * 12) + 63,
		blobbosvampire: 1379 + (53 * 12) + 64,
		blobbossexy: 1379 + (53 * 12) + 65,
		blobbosinfectedzombie: 1379 + (53 * 12) + 66,
		blobbosartist: 1379 + (53 * 12) + 67,
		blobbosbee: 1379 + (53 * 12) + 68,
		blobboshologram: 1379 + (53 * 12) + 69,
		blobbosretro: 1379 + (53 * 12) + 70,
		blobboscalamity: 1379 + (53 * 12) + 71,
		blobbosmuhmentum: 1379 + (53 * 12) + 72,
		blobboscap: 1379 + (53 * 12) + 73,
		blobboscup: 1379 + (53 * 12) + 74,
		blobbosdarkmatter: 1379 + (53 * 12) + 75,
		blobbosdelinquent: 1379 + (53 * 12) + 76,
		blobboshardcore: 1379 + (53 * 12) + 77,
		blobbosmarx: 1379 + (53 * 12) + 78,
		blobbosclassy: 1379 + (53 * 12) + 79,
		blobbosplok: 1379 + (53 * 12) + 80,
		blobboswack: 1379 + (53 * 12) + 81,
		blobboszero: 1379 + (53 * 12) + 82,
	};
	
	const BattlePokemonIconIndexesLeft = {
		pikachubelle: 1200 + 0,
		pikachupopstar: 1200 + 1,
		clefairy: 1200 + 2,
		clefable: 1200 + 3,
		jigglypuff: 1200 + 4,
		wigglytuff: 1200 + 5,
		dugtrioalola: 1200 + 6,
		poliwhirl: 1200 + 7,
		poliwrath: 1200 + 8,
		mukalola: 1200 + 9,
		kingler: 1200 + 10,
		croconaw: 1200 + 11,
		cleffa: 1200 + 12,
		igglybuff: 1200 + 13,
		politoed: 1200 + 14,
		unownb: 1200 + 15,
		unownc: 1200 + 16,
		unownd: 1200 + 17,
		unowne: 1200 + 18,
		unownf: 1200 + 19,
		unowng: 1200 + 20,
		unownh: 1200 + 21,
		unownj: 1200 + 22,
		unownk: 1200 + 23,
		unownl: 1200 + 24,
		unownm: 1200 + 25,
		unownn: 1200 + 26,
		unownp: 1200 + 27,
		unownq: 1200 + 28,
		unownquestion: 1200 + 29,
		unownr: 1200 + 30,
		unowns: 1200 + 31,
		unownt: 1200 + 32,
		unownv: 1200 + 33,
		unownz: 1200 + 34,
		sneasel: 1200 + 35,
		teddiursa: 1200 + 36,
		roselia: 1200 + 37,
		zangoose: 1200 + 38,
		seviper: 1200 + 39,
		castformsnowy: 1200 + 40,
		absolmega: 1200 + 41,
		absol: 1200 + 42,
		regirock: 1200 + 43,
		torterra: 1200 + 44,
		budew: 1200 + 45,
		roserade: 1200 + 46,
		magmortar: 1200 + 47,
		togekiss: 1200 + 48,
		rotomwash: 1200 + 49,
		shayminsky: 1200 + 50,
		emboar: 1200 + 51,
		pansear: 1200 + 52,
		simisear: 1200 + 53,
		drilbur: 1200 + 54,
		excadrill: 1200 + 55,
		sawk: 1200 + 56,
		lilligant: 1200 + 57,
		garbodor: 1200 + 58,
		solosis: 1200 + 59,
		vanilluxe: 1200 + 60,
		amoonguss: 1200 + 61,
		klink: 1200 + 62,
		klang: 1200 + 63,
		klinklang: 1200 + 64,
		litwick: 1200 + 65,
		golett: 1200 + 66,
		golurk: 1200 + 67,
		kyuremblack: 1200 + 68,
		kyuremwhite: 1200 + 69,
		kyurem: 1200 + 70,
		keldeoresolute: 1200 + 71,
		meloetta: 1200 + 72,
		greninja: 1200 + 73,
		greninjaash: 1200 + 74,
		furfroudebutante: 1200 + 75,
		barbaracle: 1200 + 76,
		clauncher: 1200 + 77,
		clawitzer: 1200 + 78,
		sylveon: 1200 + 79,
		klefki: 1200 + 80,
		zygarde: 1200 + 81,
		zygarde10: 1200 + 82,
		zygardecomplete: 1200 + 83,
		dartrix: 1200 + 84,
		steenee: 1200 + 85,
		tsareena: 1200 + 86,
		comfey: 1200 + 87,
		miniormeteor: 1200 + 88,
		minior: 1200 + 89,
		miniororange: 1200 + 90,
		minioryellow: 1200 + 91,
		miniorgreen: 1200 + 92,
		miniorblue: 1200 + 93,
		miniorviolet: 1200 + 94,
		miniorindigo: 1200 + 95,
		dhelmise: 1200 + 96,
		necrozma: 1200 + 97,
		marshadow: 1200 + 98,
		pikachuoriginal: 1200 + 99,
		pikachupartner: 1200 + 100,
		necrozmaduskmane: 1200 + 101,
		necrozmadawnwings: 1200 + 102,
		necrozmaultra: 1200 + 103,
		stakataka: 1200 + 104,
		blacephalon: 1200 + 105,
	};


	let buf = 'exports.BattlePokemonIconIndexes = ' + JSON.stringify(BattlePokemonIconIndexes) + ';\n\n';
	buf += 'exports.BattlePokemonIconIndexesLeft = ' + JSON.stringify(BattlePokemonIconIndexesLeft) + ';\n\n';

	fs.writeFileSync('data/battle-icons.js', buf);
	fs.writeFileSync('data/battle-icons.json', JSON.stringify({ indexes: BattlePokemonIconIndexes, indexesLeft: BattlePokemonIconIndexesLeft }));
}

console.log("DONE");

/*********************************************************
 * Build teambuilder-tables.js
 *********************************************************/

const restrictedLegends = ['Mewtwo', 'Lugia', 'Ho-Oh', 'Kyogre', 'Groudon', 'Rayquaza', 'Dialga', 'Palkia', 'Giratina', 'Reshiram', 'Zekrom', 'Kyurem', 'Xerneas', 'Yveltal', 'Zygarde', 'Cosmog', 'Cosmoem', 'Solgaleo', 'Lunala', 'Necrozma'];
const mythicals = ['Mew', 'Celebi', 'Jirachi', 'Deoxys', 'Phione', 'Manaphy', 'Darkrai', 'Shaymin', 'Arceus', 'Victini', 'Keldeo', 'Meloetta', 'Genesect', 'Diancie', 'Hoopa', 'Volcanion', 'Greninja-Ash', 'Magearna', 'Marshadow', 'Zeraora'];

process.stdout.write("Building `data/teambuilder-tables.js`... ");

{
	const BattleTeambuilderTable = {};

	let buf = '// DO NOT EDIT - automatically built with build-tools/build-indexes\n\n';
	const GENS = [8, 7, 6, 5, 4, 3, 2, 1];
	const DOUBLES = GENS.filter(x => x > 2).map(num => -num);
	const NFE = GENS.map(num => num + 0.3);
	const OTHER = [8.4, 8.2, 8.1, -8.4, 7.1, -7.5];
	const MODS = [{ modGen: 8, mod: 'clover' }, { modGen: 8, mod: 'clovercap' }, { modGen: 8, mod: 'cloverblobboscap' }];

	// process.stdout.write("\n  ");
	for (const genIdent of [...GENS, ...DOUBLES, ...NFE, ...OTHER]) {
		const isLetsGo = (genIdent === 7.1);
		const isMetBattle = (genIdent === 8.2);
		const isNFE = (('' + genIdent).endsWith('.3'));
		const isDLC1 = (genIdent === 8.4 || genIdent === -8.4);
		const isNatDex = (genIdent === 8.1);
		const isDoubles = (genIdent < 0);
		const isVGC = (genIdent === -7.5);
		const genNum = Math.floor(isDoubles ? -genIdent : genIdent);
		const gen = 'gen' + genNum + (isDLC1 ? 'dlc1' : isLetsGo ? 'letsgo' : '');
		// process.stdout.write("" + gen + (isDoubles ? " doubles" : "") + "... ");
		const pokemon = Object.keys(Dex.data.Pokedex);
		pokemon.sort();
		const tierTable = {};
		const overrideTier = {};
		const zuBans = {};
		const nonstandardMoves = [];
		for (const id of pokemon) {
			const species = Dex.mod(gen).species.get(id);
			if (species.gen > genNum) continue;
			const tier = (() => {
				if (isNatDex) {
					const unobtainables = [
						'Eevee-Starter', 'Floette-Eternal', 'Pichu-Spiky-eared', 'Pikachu-Belle', 'Pikachu-Cosplay', 'Pikachu-Libre', 'Pikachu-PhD', 'Pikachu-Pop-Star', 'Pikachu-Rock-Star', 'Pikachu-Starter', 'Eternatus-Eternamax',
					].map(toID);
					if (species.isNonstandard && !['Past', 'Gigantamax',].includes(species.isNonstandard)) return 'Illegal';
					if (unobtainables.includes(species.id)) return 'Illegal';
					const uu = Dex.formats.get('gen8nationaldexuu');
					const ou = Dex.formats.get('gen8nationaldex');
					if (Dex.formats.getRuleTable(ou).isBannedSpecies(species)) return 'Uber';
					if (Dex.formats.getRuleTable(ou).has('dynamaxclause') && species.name.endsWith('Gmax')) return '(Uber)';
					if (Tags.nduubl.speciesFilter(species)) return 'UUBL';
					if (Dex.formats.getRuleTable(uu).isBannedSpecies(species)) return 'OU';
					if (Dex.formats.getRuleTable(uu).isRestrictedSpecies(species)) {
						return 'UU';
					} else {
						if (species.nfe) {
							if (species.prevo) {
								return 'NFE';
							} else {
								return 'LC';
							}
						}

						return '(UU)';
					}
				}
				if (isMetBattle) {
					let tier = species.tier;
					if (species.isNonstandard) {
						if (species.isNonstandard === 'Past') {
							tier = Dex.mod('gen7').species.get(species.name).tier;
						} else {
							tier = 'OU';
						}
					}
					if (species.isNonstandard === 'Gigantamax') tier = '(Uber)';
					if (species.tier === 'CAP LC') tier = 'LC';
					if (species.tier === 'CAP NFE') tier = 'NFE';
					if (species.tier === 'CAP') tier = 'OU';
					const format = Dex.formats.get('gen8metronomebattle');
					let bst = 0;
					for (const stat of Object.values(species.baseStats)) {
						bst += stat;
					}
					if (bst > 625) tier = 'Illegal';
					if (Dex.formats.getRuleTable(format).isBannedSpecies(species)) tier = 'Illegal';
					if (species.types.includes('Steel')) tier = 'Illegal';
					return tier;
				}
				if (isNFE) {
					let tier = species.tier;
					if (!species.nfe) tier = 'Illegal';
					const format = Dex.formats.get(gen + 'nfe');
					const banlist = Dex.formats.getRuleTable(format);
					if (banlist.isBannedSpecies(species)) {
						tier = 'Uber';
					}
					return tier;
				}
				if (isLetsGo) {
					let baseSpecies = Dex.mod(gen).species.get(species.baseSpecies);
					let validNum = (baseSpecies.num <= 151 && species.num >= 1) || [808, 809].includes(baseSpecies.num);
					if (!validNum) return 'Illegal';
					if (species.forme && !['Alola', 'Mega', 'Mega-X', 'Mega-Y', 'Starter'].includes(species.forme)) return 'Illegal';
					return species.tier;
				}
				if (isVGC) {
					if (species.tier === 'NFE') return 'NFE';
					if (species.tier === 'LC') return 'NFE';
					if (species.tier === 'Illegal' || species.tier === 'Unreleased') return 'Illegal';
					if (restrictedLegends.includes(species.name) || restrictedLegends.includes(species.baseSpecies)) {
						return 'Restricted Legendary';
					}
					if (mythicals.includes(species.name) || mythicals.includes(species.baseSpecies)) {
						return 'Mythical';
					}
					return 'Regular';
				}
				if (species.tier === 'CAP' || species.tier === 'CAP NFE' || species.tier === 'CAP LC') {
					return species.tier;
				}
				if (isDoubles && genNum > 4) {
					return species.doublesTier;
				}
				return species.tier;
			})();
			overrideTier[species.id] = tier;
			if (species.forme) {
				if (
					[
						'Aegislash', 'Castform', 'Cherrim', 'Cramorant', 'Eiscue', 'Meloetta', 'Mimikyu', 'Minior', 'Morpeko', 'Wishiwashi', 'Eccosmic', 'Fontaba', 'Fucker',
					].includes(species.baseSpecies) || species.forme.includes('Totem') || species.forme.includes('Zen')
				) {
					continue;
				}
			}

			if (!tierTable[tier]) tierTable[tier] = [];
			tierTable[tier].push(id);

			if (gen === 'gen7' && id in {ferroseed:1} && tier !== 'LC') {
				if (!tierTable['LC']) tierTable['LC'] = [];
				tierTable['LC'].push(id);
			} else if (gen === 'gen6' && id in {ferroseed:1, pawniard:1, vullaby:1} && tier !== 'LC') {
				if (!tierTable['LC']) tierTable['LC'] = [];
				tierTable['LC'].push(id);
			} else if (gen === 'gen5' && id in {misdreavus:1, ferroseed:1} && tier !== 'LC') {
				if (!tierTable['LC']) tierTable['LC'] = [];
				tierTable['LC'].push(id);
			} else if (gen === 'gen4' && id in {clamperl:1, diglett:1, gligar:1, hippopotas:1, snover:1, wynaut:1} && tier !== 'LC') {
				if (!tierTable['LC']) tierTable['LC'] = [];
				tierTable['LC'].push(id);
			}

			if (genNum >= 7) {
				const format = Dex.formats.get(gen + 'zu');
				if (Dex.formats.getRuleTable(format).isBannedSpecies(species) && ["(PU)", "NFE", "LC"].includes(species.tier)) {
					zuBans[species.id] = 1;
				}
			}
		}

		nonstandardMoves.push(...Object.keys(Dex.data.Moves).filter(id => {
			const move = Dex.mod('gen8dlc1').moves.get(id);
			const bMove = Dex.mod('gen8').moves.get(id);
			return bMove.isNonstandard !== move.isNonstandard;
		}));

		const tiers = [];
		const items = [];
		const formatSlices = {};

		if (isNatDex) {
			BattleTeambuilderTable['natdex'] = {};
			BattleTeambuilderTable['natdex'].tiers = tiers;
			BattleTeambuilderTable['natdex'].items = items;
			BattleTeambuilderTable['natdex'].formatSlices = formatSlices;
		} else if (isMetBattle) {
			BattleTeambuilderTable['metronome'] = {};
			BattleTeambuilderTable['metronome'].tiers = tiers;
			BattleTeambuilderTable['metronome'].items = items;
			BattleTeambuilderTable['metronome'].formatSlices = formatSlices;
		} else if (isNFE) {
			BattleTeambuilderTable[gen + 'nfe'] = {};
			BattleTeambuilderTable[gen + 'nfe'].tiers = tiers;
			BattleTeambuilderTable[gen + 'nfe'].overrideTier = overrideTier;
			BattleTeambuilderTable[gen + 'nfe'].formatSlices = formatSlices;
		} else if (isLetsGo) {
			BattleTeambuilderTable['letsgo'] = {};
			BattleTeambuilderTable['letsgo'].learnsets = {};
			BattleTeambuilderTable['letsgo'].tiers = tiers;
			BattleTeambuilderTable['letsgo'].overrideTier = overrideTier;
			BattleTeambuilderTable['letsgo'].formatSlices = formatSlices;
		} else if (isVGC) {
			BattleTeambuilderTable[gen + 'vgc'] = {};
			BattleTeambuilderTable[gen + 'vgc'].tiers = tiers;
			BattleTeambuilderTable[gen + 'vgc'].formatSlices = formatSlices;
		} else if (isDoubles) {
			BattleTeambuilderTable[gen + 'doubles'] = {};
			BattleTeambuilderTable[gen + 'doubles'].tiers = tiers;
			BattleTeambuilderTable[gen + 'doubles'].overrideTier = overrideTier;
			BattleTeambuilderTable[gen + 'doubles'].formatSlices = formatSlices;
		} else if (gen === 'gen8') {
			BattleTeambuilderTable.tiers = tiers;
			BattleTeambuilderTable.items = items;
			BattleTeambuilderTable.overrideTier = overrideTier;
			BattleTeambuilderTable.zuBans = zuBans;
			BattleTeambuilderTable.formatSlices = formatSlices;
		} else {
			BattleTeambuilderTable[gen] = {};
			BattleTeambuilderTable[gen].overrideTier = overrideTier;
			BattleTeambuilderTable[gen].tiers = tiers;
			BattleTeambuilderTable[gen].items = items;
			BattleTeambuilderTable[gen].formatSlices = formatSlices;
			if (genNum >= 7) {
				BattleTeambuilderTable[gen].zuBans = zuBans;
			}
			if (isDLC1) {
				BattleTeambuilderTable[gen].nonstandardMoves = nonstandardMoves;
				BattleTeambuilderTable[gen].learnsets = {};
			}
		}

		const tierOrder = (() => {
			if (isNatDex) {
				return ["CAP", "CAP NFE", "CAP LC", "AG", "Uber", "OU", "UUBL", "(OU)", "UU", "(UU)", "NFE", "LC"];
			}
			if (isLetsGo) {
				return ["Uber", "OU", "UU", "NFE", "LC"];
			}
			if (isVGC) {
				return ["Mythical", "Restricted Legendary", "Regular", "NFE", "LC"];
			}
			if (isDoubles && genNum > 4) {
				return ["DUber", "(DUber)", "DOU", "DBL", "(DOU)", "DUU", "(DUU)", "New", "NFE", "LC"];
			}
			if (gen === 'gen1' || gen === 'gen2' || gen === 'gen3') {
				return ["Uber", "OU", "(OU)", "UUBL", "UU", "NUBL", "NU", "PUBL", "PU", "NFE", "LC"];
			}
			if (gen === 'gen4') {
				return ["CAP", "CAP NFE", "CAP LC", "AG", "Uber", "OU", "(OU)", "UUBL", "UU", "NUBL", "NU", "NFE", "LC"];
			}
			if (gen === 'gen5') {
				return ["CAP", "CAP NFE", "CAP LC", "Uber", "OU", "(OU)", "UUBL", "UU", "RUBL", "RU", "NUBL", "NU", "(NU)", "NFE", "LC"];
			}
			if (gen === 'gen7') {
				return ["CAP", "CAP NFE", "CAP LC", "AG", "Uber", "OU", "(OU)", "UUBL", "UU", "RUBL", "RU", "NUBL", "NU", "PUBL", "PU", "(PU)", "NFE", "LC", "Unreleased"];
			}
			return ["CAP", "CAP NFE", "CAP LC", "AG", "Uber", "(Uber)", "OU", "(OU)", "UUBL", "UU", "RUBL", "RU", "NUBL", "NU", "PUBL", "PU", "(PU)", "New", "NFE", "LC", "Unreleased"];
		})();

		for (const tier of tierOrder) {
			if (tier in {OU:1, AG:1, Uber:1, UU:1, "(UU)":1, RU:1, NU:1, "(NU)":1, PU:1, "(PU)":1, NFE:1, LC:1, DOU:1, DUU:1, "(DUU)":1, New:1, Legal:1, Regular:1, "Restricted Legendary":1, "CAP LC":1}) {
				let usedTier = tier;
				if (usedTier === "(UU)") usedTier = "RU";
				if (usedTier === "(NU)") usedTier = "PU";
				if (usedTier === "(PU)") usedTier = "ZU";
				if (usedTier === "(DUU)") usedTier = "DNU";
				formatSlices[usedTier] = tiers.length;
			}
			if (!tierTable[tier]) continue;
			if (tier === "(UU)") {
				tiers.push(['header', "Below UU"]);
			} else if (tier === "(NU)") {
				tiers.push(['header', "Below NU"]);
			} else if (tier === "(PU)") {
				tiers.push(['header', "Below PU"]);
			} else if (tier === "(DUU)") {
				tiers.push(['header', "Below DUU"]);
			} else if (tier.charAt(0) === '(') {
				tiers.push(['header', tier.slice(1, -1) + " by technicality"]);
			} else if (tier === "NFE") {
				tiers.push(['header', "NFEs not in a higher tier"]);
			} else {
				tiers.push(['header', tier]);
			}
			tiers.push(...tierTable[tier]);
		}
		if (!isDoubles) {
			if (!formatSlices['OU']) formatSlices['OU'] = formatSlices['New'];
			if (!formatSlices['UU']) formatSlices['UU'] = formatSlices['New'];
			if (!formatSlices['RU']) formatSlices['RU'] = formatSlices['New'];
		} else {
			if (!formatSlices['DOU']) formatSlices['DOU'] = formatSlices['New'];
			if (!formatSlices['DUU']) formatSlices['DUU'] = formatSlices['New'];
		}

		const itemList = Object.keys(Dex.data.Items);
		itemList.sort();

		const greatItems = [['header', "Popular items"]];
		const goodItems = [['header', "Items"]];
		const specificItems = [['header', "Pok&eacute;mon-specific items"]];
		const poorItems = [['header', "Usually useless items"]];
		const badItems = [['header', "Useless items"]];
		const unreleasedItems = [];
		if (genNum === 6) unreleasedItems.push(['header', "Unreleased"]);
		for (const id of itemList) {
			const item = Dex.mod(gen).items.get(id);
			if (item.gen > genNum) {
				continue;
			}
			if (item.isNonstandard && !isMetBattle) {
				if (isNatDex) {
					if (item.isNonstandard !== "Past") continue;
					if (!item.itemUser && !item.zMove) continue;
				} else if (genNum !== 2) {
					continue;
				}
			}
			if (isMetBattle) {
				const banlist = Dex.formats.getRuleTable(Dex.formats.get('gen8metronomebattle'));
				if (banlist.isBanned('item:' + item.id)) continue;
			}
			switch (id) {
			case 'leftovers':
			case 'lifeorb':
			case 'choiceband':
			case 'choicescarf':
			case 'choicespecs':
			case 'eviolite':
			case 'assaultvest':
			case 'focussash':
			case 'powerherb':
			case 'rockyhelmet':
			case 'heavydutyboots':
			case 'expertbelt':
			case 'salacberry':
				greatItems.push(id);
				break;
			case 'mentalherb':
				if (genNum > 4) greatItems.push(id);
				else poorItems.push(id);
				break;
			case 'lumberry':
				if (genNum === 2 || genNum > 6) goodItems.push(id);
				else greatItems.push(id);
				break;
			case 'sitrusberry':
				if (genNum > 6) goodItems.push(id);
				else if (genNum > 3 && genNum < 7) greatItems.push(id);
				else poorItems.push(id);
				break;
			case 'aguavberry':
			case 'figyberry':
			case 'iapapaberry':
			case 'magoberry':
			case 'wikiberry':
				if (genNum >= 7) greatItems.push(id);
				else poorItems.push(id);
				break;
			case 'berryjuice':
				if (genNum === 2) poorItems.push(id);
				else goodItems.push(id);
				break;
			case 'dragonfang':
				if (genNum === 2) badItems.push(id);
				else goodItems.push(id);
				break;
			case 'mail':
				if (genNum >= 6) unreleasedItems.push(id);
				else goodItems.push(id);
				break;
			// Legendaries
			case 'adamantorb':
			case 'griseousorb':
			case 'lustrousorb':
			case 'blueorb':
			case 'redorb':
			case 'souldew':
			// Other
			// fallsthrough
			case 'stick':
			case 'thickclub':
			case 'lightball':
			case 'luckypunch':
			case 'quickpowder':
			case 'metalpowder':
			case 'deepseascale':
			case 'deepseatooth':
				specificItems.push(id);
				break;
			// Fling-only
			case 'rarebone':
			case 'belueberry':
			case 'blukberry':
			case 'cornnberry':
			case 'durinberry':
			case 'hondewberry':
			case 'magostberry':
			case 'nanabberry':
			case 'nomelberry':
			case 'pamtreberry':
			case 'pinapberry':
			case 'pomegberry':
			case 'qualotberry':
			case 'rabutaberry':
			case 'razzberry':
			case 'spelonberry':
			case 'tamatoberry':
			case 'watmelberry':
			case 'wepearberry':
			case 'energypowder':
			case 'electirizer':
			case 'oldamber':
			case 'dawnstone':
			case 'dragonscale':
			case 'dubiousdisc':
			case 'duskstone':
			case 'firestone':
			case 'icestone':
			case 'leafstone':
			case 'magmarizer':
			case 'moonstone':
			case 'ovalstone':
			case 'prismscale':
			case 'protector':
			case 'reapercloth':
			case 'sachet':
			case 'shinystone':
			case 'sunstone':
			case 'thunderstone':
			case 'upgrade':
			case 'waterstone':
			case 'whippeddream':
			case 'bottlecap':
			case 'goldbottlecap':
			case 'galaricacuff':
				badItems.push(id);
				break;
			// outclassed items
			case 'aspearberry':
			case 'bindingband':
			case 'cheriberry':
			case 'destinyknot':
			case 'enigmaberry':
			case 'floatstone':
			case 'ironball':
			case 'jabocaberry':
			case 'oranberry':
			case 'machobrace':
			case 'pechaberry':
			case 'persimberry':
			case 'poweranklet':
			case 'powerband':
			case 'powerbelt':
			case 'powerbracer':
			case 'powerlens':
			case 'powerweight':
			case 'rawstberry':
			case 'ringtarget':
			case 'rowapberry':
			case 'bigroot':
			case 'focusband':
			// gen 2
			case 'psncureberry':
			case 'przcureberry':
			case 'burntberry':
			case 'bitterberry':
			case 'iceberry':
			case 'berry':
				poorItems.push(id);
				break;
			default:
				if (
					item.name.endsWith(" Ball") || item.name.endsWith(" Fossil") || item.name.startsWith("Fossilized ") ||
					item.name.endsWith(" Sweet") || item.name.endsWith(" Apple")
				) {
					badItems.push(id);
				} else if (item.name.startsWith("TR")) {
					badItems.push(id);
				} else if (item.name.endsWith(" Gem") && item.name !== "Normal Gem") {
					if (genNum >= 6) {
						unreleasedItems.push(id);
					} else if (item.name === "Flying Gem") {
						greatItems.push(id);
					} else {
						goodItems.push(id);
					}
				} else if (item.name.endsWith(" Drive")) {
					specificItems.push(id);
				} else if (item.name.endsWith(" Memory")) {
					specificItems.push(id);
				} else if (item.name.startsWith("Rusted")) {
					specificItems.push(id);
				} else if (item.itemUser) {
					specificItems.push(id);
				} else if (item.megaStone) {
					specificItems.push(id);
				} else {
					goodItems.push(id);
				}
			}
		}
		items.push(...greatItems);
		items.push(...goodItems);
		items.push(...specificItems);
		items.push(...poorItems);
		items.push(...badItems);
		items.push(...unreleasedItems);
	}

	//
	// Learnset table
	//

	const gen3HMs = new Set(['cut', 'fly', 'surf', 'strength', 'flash', 'rocksmash', 'waterfall', 'dive']);
	const gen4HMs = new Set(['cut', 'fly', 'surf', 'strength', 'rocksmash', 'waterfall', 'rockclimb']);

	const learnsets = {};
	BattleTeambuilderTable.learnsets = learnsets;
	for (const id in Dex.data.Learnsets) {
		const learnset = Dex.data.Learnsets[id].learnset;
		if (!learnset) continue;
		learnsets[id] = {};
		for (const moveid in learnset) {
			const gens = learnset[moveid].map(x => Number(x[0]));
			const minGen = Math.min(...gens);
			const vcOnly = (minGen === 7 && learnset[moveid].every(x => x[0] !== '7' || x === '7V') ||
				minGen === 8 && learnset[moveid].every(x => x[0] !== '8' || x === '8V'));

			if (minGen <= 4 && (gen3HMs.has(moveid) || gen4HMs.has(moveid))) {
				let legalGens = '';
				let available = false;

				if (minGen === 3) {
					legalGens += '3';
					available = true;
				}
				if (available) available = !gen3HMs.has(moveid);

				if (available || gens.includes(4)) {
					legalGens += '4';
					available = true;
				}
				if (available) available = !gen4HMs.has(moveid);

				let minUpperGen = available ? 5 : Math.min(
					...gens.filter(gen => gen > 4)
				);
				legalGens += '012345678'.slice(minUpperGen);
				learnsets[id][moveid] = legalGens;
			} else {
				learnsets[id][moveid] = '012345678'.slice(minGen);
			}

			if (gens.indexOf(6) >= 0) learnsets[id][moveid] += 'p';
			if (gens.indexOf(7) >= 0 && !vcOnly) learnsets[id][moveid] += 'q';
			if (gens.indexOf(8) >= 0 && !vcOnly) learnsets[id][moveid] += 'g';
		}
	}
	const G2Learnsets = Dex.mod('gen2').data.Learnsets;
	for (const id in G2Learnsets) {
		const learnset = G2Learnsets[id].learnset;
		for (const moveid in learnset) {
			const gens = learnset[moveid].map(x => Number(x[0]));
			const minGen = Math.min(...gens);
			if (!learnsets[id]) {
				throw new Error(`${id} has a Gen 2 learnset but not a modern learnset`);
			}
			if (!learnsets[id][moveid]) learnsets[id][moveid] = '';
			if (minGen === 2) learnsets[id][moveid] = '2' + learnsets[id][moveid];
			if (minGen === 1) learnsets[id][moveid] = '12' + learnsets[id][moveid];
		}
	}
	const LGLearnsets = Dex.mod('gen7letsgo').data.Learnsets;
	for (const id in LGLearnsets) {
		const species = Dex.mod('gen7letsgo').species.get(id);
		const baseSpecies = Dex.mod('gen7letsgo').species.get(species.baseSpecies);
		const validNum = (baseSpecies.num <= 151 && baseSpecies.num >= 1) || [808, 809].includes(baseSpecies.num);
		if (!validNum) continue;
		if (species.forme && !['Alola', 'Mega', 'Mega-X', 'Mega-Y', 'Starter'].includes(species.forme)) continue;
		const learnset = LGLearnsets[id].learnset;
		BattleTeambuilderTable['letsgo'].learnsets[id] = {};
		for (const moveid in learnset) {
			BattleTeambuilderTable['letsgo'].learnsets[id][moveid] = '7';
		}
	}
	const DLC1Learnsets = Dex.mod('gen8dlc1').data.Learnsets;
	for (const id in DLC1Learnsets) {
		const learnset = DLC1Learnsets[id].learnset;
		if (!learnset) continue;
		BattleTeambuilderTable['gen8dlc1'].learnsets[id] = {};
		for (const moveid in learnset) {
			const gens = learnset[moveid].map(x => Number(x[0]));
			const minGen = Math.min(...gens);
			const vcOnly = (minGen === 7 && learnset[moveid].every(x => x[0] !== '7' || x === '7V') ||
				minGen === 8 && learnset[moveid].every(x => x[0] !== '8' || x === '8V'));

			if (minGen <= 4 && (gen3HMs.has(moveid) || gen4HMs.has(moveid))) {
				let legalGens = '';
				let available = false;

				if (minGen === 3) {
					legalGens += '3';
					available = true;
				}
				if (available) available = !gen3HMs.has(moveid);

				if (available || gens.includes(4)) {
					legalGens += '4';
					available = true;
				}
				if (available) available = !gen4HMs.has(moveid);

				let minUpperGen = available ? 5 : Math.min(
					...gens.filter(gen => gen > 4)
				);
				legalGens += '012345678'.slice(minUpperGen);
				BattleTeambuilderTable['gen8dlc1'].learnsets[id][moveid] = legalGens;
			} else {
				BattleTeambuilderTable['gen8dlc1'].learnsets[id][moveid] = '012345678'.slice(minGen);
			}

			if (gens.indexOf(6) >= 0) BattleTeambuilderTable['gen8dlc1'].learnsets[id][moveid] += 'p';
			if (gens.indexOf(7) >= 0 && !vcOnly) BattleTeambuilderTable['gen8dlc1'].learnsets[id][moveid] += 'q';
			if (gens.indexOf(8) >= 0 && !vcOnly) BattleTeambuilderTable['gen8dlc1'].learnsets[id][moveid] += 'g';
		}
	}

	//
	// Past gen table
	//

	for (const genNum of [7, 6, 5, 4, 3, 2, 1]) {
		const gen = 'gen' + genNum;
		const nextGen = 'gen' + (genNum + 1);
		const genData = Dex.mod(gen).data;
		const nextGenData = Dex.mod(nextGen).data;
		const overrideSpeciesData = {};
		BattleTeambuilderTable[gen].overrideSpeciesData = overrideSpeciesData;
		const overrideSpeciesKeys = ['abilities', 'baseStats', 'requiredItem', 'types'];
		for (const id in genData.Pokedex) {
			const curEntry = genData.Pokedex[id];
			const nextEntry = nextGenData.Pokedex[id];
			for (const key of overrideSpeciesKeys) {
				if (JSON.stringify(curEntry[key]) !== JSON.stringify(nextEntry[key])) {
					if (!overrideSpeciesData[id]) overrideSpeciesData[id] = {};
					overrideSpeciesData[id][key] = curEntry[key];
				}
			}
		}

		const overrideBP = {};
		BattleTeambuilderTable[gen].overrideBP = overrideBP;
		const overrideAcc = {};
		BattleTeambuilderTable[gen].overrideAcc = overrideAcc;
		const overridePP = {};
		BattleTeambuilderTable[gen].overridePP = overridePP;
		const overrideMoveDesc = {};
		BattleTeambuilderTable[gen].overrideMoveDesc = overrideMoveDesc;
		const overrideMoveType = {};
		BattleTeambuilderTable[gen].overrideMoveType = overrideMoveType;
		BattleTeambuilderTable[gen].overrideMoveIsNonstandard = {};

		for (const id in genData.Moves) {
			const pastEntry = genData.Moves[id];
			const nowEntry = Dex.data.Moves[id];
			const nextEntry = nextGenData.Moves[id];
			if (pastEntry.basePower !== nowEntry.basePower) {
				overrideBP[id] = pastEntry.basePower;
			}
			if (pastEntry.accuracy !== nowEntry.accuracy) {
				overrideAcc[id] = pastEntry.accuracy;
			}
			if (pastEntry.pp !== nowEntry.pp) {
				overridePP[id] = pastEntry.pp;
			}
			if (pastEntry.type !== nowEntry.type) {
				overrideMoveType[id] = pastEntry.type;
			}
			if (pastEntry.shortDesc !== nextEntry.shortDesc) {
				overrideMoveDesc[id] = pastEntry.shortDesc;
			}
		}

		const overrideItemDesc = {};
		BattleTeambuilderTable[gen].overrideItemDesc = overrideItemDesc;
		for (const id in genData.Items) {
			const curEntry = Dex.mod(gen).items.get(id);
			const nextEntry = Dex.mod(nextGen).items.get(id);
			if ((curEntry.shortDesc || curEntry.desc) !== (nextEntry.shortDesc || nextEntry.desc)) {
				overrideItemDesc[id] = (curEntry.shortDesc || curEntry.desc);
			}
		}

		const overrideAbilityDesc = {};
		BattleTeambuilderTable[gen].overrideAbilityDesc = overrideAbilityDesc;
		for (const id in genData.Abilities) {
			const curEntry = Dex.mod(gen).abilities.get(id);
			const nextEntry = Dex.mod(nextGen).abilities.get(id);
			if ((curEntry.shortDesc || curEntry.desc) !== (nextEntry.shortDesc || nextEntry.desc)) {
				overrideAbilityDesc[id] = (curEntry.shortDesc || curEntry.desc);
			}
		}

		const overrideTypeChart = {};
		BattleTeambuilderTable[gen].overrideTypeChart = overrideTypeChart;
		const removeType = {};
		BattleTeambuilderTable[gen].removeType = removeType;
		for (const id in nextGenData.TypeChart) {
			const curEntry = genData.TypeChart[id];
			const nextEntry = nextGenData.TypeChart[id];
			if (curEntry.isNonstandard) {
				removeType[id] = true;
				continue;
			}
			if (JSON.stringify(nextEntry) !== JSON.stringify(curEntry)) {
				overrideTypeChart[id] = curEntry;
			}
		}
	}

	const getNatDexTier = (species) => {
		const unobtainables = [
			'Eevee-Starter', 'Floette-Eternal', 'Pichu-Spiky-eared', 'Pikachu-Belle', 'Pikachu-Cosplay', 'Pikachu-Libre', 'Pikachu-PhD', 'Pikachu-Pop-Star', 'Pikachu-Rock-Star', 'Pikachu-Starter', 'Eternatus-Eternamax',
		].map(toID);
		if (species.isNonstandard && !['Past', 'Gigantamax'].includes(species.isNonstandard)) return 'Illegal';
		if (unobtainables.includes(species.id)) return 'Illegal';
		const uu = Dex.formats.get('gen8nationaldexuu');
		const ou = Dex.formats.get('gen8nationaldex');
		const uublIndex = uu.banlist.map(toID).indexOf('nduubl');
		if (Dex.formats.getRuleTable(ou).isBannedSpecies(species)) return 'Uber';
		if (Dex.formats.getRuleTable(ou).has('dynamaxclause') && species.name.endsWith('Gmax')) return '(Uber)';
		if (Dex.formats.getRuleTable(uu).isBannedSpecies(species)) {
			if (
				uu.banlist.map(toID).indexOf(species.id) >= uublIndex ||
				uu.banlist.map(toID).indexOf(species.id + 'base') >= uublIndex ||
				uu.banlist.map(toID).indexOf(toID(species.baseSpecies)) >= uublIndex
			) {
				return 'UUBL';
			} else {
				return 'OU';
			}
		}
		if (Dex.formats.getRuleTable(uu).isRestrictedSpecies(species)) {
			return 'UU';
		} else {
			if (species.nfe) {
				if (species.prevo) {
					return 'NFE';
				} else {
					return 'LC';
				}
			}

			return '(UU)';
		}
	};

	for (const { modGen, mod } of MODS) {
		const moddedDex = Dex.mod(mod);
		const modOnlyTablename = `${mod}only`;
		const natDexTablename = `${mod}natdex`;

		BattleTeambuilderTable[modOnlyTablename] = {};
		BattleTeambuilderTable[natDexTablename] = {};

		const pokemon = Object.keys(moddedDex.data.Pokedex);
		pokemon.sort();

		const modOnlyTierTable = {};
		const modOnlyOverrideTier = {};
		const natDexTierTable = {};
		const natDexOverrideTier = {};
		for (const pokemonId of pokemon) {
			const species = moddedDex.species.get(pokemonId);
			let modOnlyTier = 'Illegal';
			let natDexTier = 'Illegal';

			if (!species.isNonstandard) {
				modOnlyTier = species.tier;
				natDexTier = species.tier;
			} else {
				natDexTier = getNatDexTier(species);
			}

			if (!modOnlyTierTable[modOnlyTier]) modOnlyTierTable[modOnlyTier] = [];
			if (!natDexTierTable[natDexTier]) natDexTierTable[natDexTier] = [];

			modOnlyTierTable[modOnlyTier].push(pokemonId);
			modOnlyOverrideTier[pokemonId] = modOnlyTier;
			natDexTierTable[natDexTier].push(pokemonId);
			natDexOverrideTier[pokemonId] = natDexTier;
		}

		const modOnlyTiers = []
		const modOnlyFormatSlices = {};
		const natDexTiers = [];
		const natDexFormatSlices = {};
		const tierOrder = ["CAP", "CAP NFE", "CAP LC", "AG", "Uber", "(Uber)", "OU", "UUBL", "(OU)", "UU", "RUBL", "(UU)", "RU", "NUBL", "(RU)", "NU", "NFE", "LC Uber", "LC"];
		for (const tier of tierOrder) {
			if (tier in { OU: 1, AG: 1, Uber: 1, UU: 1, "(UU)": 1, RU: 1, NU: 1, NFE: 1, LC: 1 }) {
				let usedTier = tier;
				if (usedTier === "(UU)") usedTier = "RU";
				modOnlyFormatSlices[usedTier] = modOnlyTiers.length;
				natDexFormatSlices[usedTier] = natDexTiers.length;
			}

			if (modOnlyTierTable[tier]) {
				if (tier === "(UU)") {
					modOnlyTiers.push(['header', "Below UU"]);
				} else if (tier.charAt(0) === '(') {
					modOnlyTiers.push(['header', tier.slice(1, -1) + " by technicality"]);
				} else if (tier === "NFE") {
					modOnlyTiers.push(['header', "NFEs not in a higher tier"]);
				} else {
					modOnlyTiers.push(['header', tier]);
				}
				modOnlyTiers.push(...modOnlyTierTable[tier]);
			}

			if (natDexTierTable[tier]) {
				if (tier === "(UU)") {
					natDexTiers.push(['header', "Below UU"]);
				} else if (tier.charAt(0) === '(') {
					natDexTiers.push(['header', tier.slice(1, -1) + " by technicality"]);
				} else if (tier === "NFE") {
					natDexTiers.push(['header', "NFEs not in a higher tier"]);
				} else {
					natDexTiers.push(['header', tier]);
				}
				natDexTiers.push(...natDexTierTable[tier]);
			}
		}

		const itemList = Object.keys(moddedDex.data.Items);
		itemList.sort();
		const modOnlyItems = [];
		const natDexItems = [];
		for (const itemId of itemList) {
			const item = moddedDex.items.get(itemId);

			if (!item.isNonstandard) {
				modOnlyItems.push(itemId);
				natDexItems.push(itemId);
			} else {
				if (!item.isNonstandard || item.isNonstandard === "Past") {
					natDexItems.push(itemId);
				} else {
					if (item.isNonstandard) {
						if (item.isNonstandard !== "Past") continue;
						if (!item.itemUser && !item.zMove) continue;
					}
					natDexItems.push(itemId);
				}
			}
		}

		const moddedLearnsets = {};
		for (const id in moddedDex.data.Learnsets) {
			const learnset = moddedDex.data.Learnsets[id].learnset;
			if (!learnset) continue;
			moddedLearnsets[id] = {};
			for (const moveid in learnset) {
				const gens = learnset[moveid].map(x => Number(x[0]));
				const minGen = Math.min(...gens);
				const vcOnly = (minGen === 7 && learnset[moveid].every(x => x[0] !== '7' || x === '7V') ||
					minGen === 8 && learnset[moveid].every(x => x[0] !== '8' || x === '8V'));

				if (minGen <= 4 && (gen3HMs.has(moveid) || gen4HMs.has(moveid))) {
					let legalGens = '';
					let available = false;

					if (minGen === 3) {
						legalGens += '3';
						available = true;
					}
					if (available) available = !gen3HMs.has(moveid);

					if (available || gens.includes(4)) {
						legalGens += '4';
						available = true;
					}
					if (available) available = !gen4HMs.has(moveid);

					let minUpperGen = available ? 5 : Math.min(
						...gens.filter(gen => gen > 4)
					);
					legalGens += '012345678'.slice(minUpperGen);
					moddedLearnsets[id][moveid] = legalGens;
				} else {
					moddedLearnsets[id][moveid] = '012345678'.slice(minGen);
				}

				if (gens.indexOf(6) >= 0) moddedLearnsets[id][moveid] += 'p';
				if (gens.indexOf(7) >= 0 && !vcOnly) moddedLearnsets[id][moveid] += 'q';
				if (gens.indexOf(8) >= 0 && !vcOnly) moddedLearnsets[id][moveid] += 'g';
			}
		}

		const baseData = Dex.data;
		const modData = moddedDex.data;

		const overrideBP = {};
		const overrideAcc = {};
		const overridePP = {};
		const overrideMoveDesc = {};
		const overrideMoveType = {};
		const overrideMoveIsNonstandard = {};
		const overrideItemDesc = {};
		const overrideAbilityDesc = {};

		for (const moveId in modData.Moves) {
			const modDescs = moddedDex.getDescs('Moves', moveId, {});
			const baseEntry = baseData.Moves[moveId];
			const modEntry = modData.Moves[moveId];

			if (baseEntry.basePower !== modEntry.basePower) {
				overrideBP[moveId] = modEntry.basePower;
			}
			if (baseEntry.accuracy !== modEntry.accuracy) {
				overrideAcc[moveId] = modEntry.accuracy;
			}
			if (baseEntry.pp !== modEntry.pp) {
				overridePP[moveId] = modEntry.pp;
			}
			if (baseEntry.type !== modEntry.type) {
				overrideMoveType[moveId] = modEntry.type;
			}
			if (baseEntry.shortDesc !== modEntry.shortDesc) {
				overrideMoveDesc[moveId] = modEntry.shortDesc;
			} else if (modDescs && (baseEntry.shortDesc !== modDescs.shortDesc)) {
				overrideMoveDesc[moveId] = modDescs.shortDesc;
			}
			if (baseEntry.isNonstandard !== modEntry.isNonstandard) {
				overrideMoveIsNonstandard[moveId] = modEntry.isNonstandard;
			}
		}

		for (const itemId in modData.Items) {
			const modDescs = moddedDex.getDescs('Items', itemId, {});
			const baseEntry = baseData.Items[itemId];
			const modEntry = modData.Items[itemId];

			if ((baseEntry.shortDesc || baseEntry.desc) !== (modEntry.shortDesc || modEntry.desc)) {
				overrideItemDesc[itemId] = (modEntry.shortDesc || modEntry.desc);
			} else if (modDescs && (baseEntry.shortDesc || baseEntry.desc) !== (modDescs.shortDesc || modDescs.desc)) {
				overrideItemDesc[itemId] = (modDescs.shortDesc || modDescs.desc);
			}
		}

		for (const abilityId in modData.Abilities) {
			const modDescs = moddedDex.getDescs('Abilities', abilityId, {});
			const baseEntry = baseData.Abilities[abilityId];
			const modEntry = modData.Abilities[abilityId];

			if ((baseEntry.shortDesc || baseEntry.desc) !== (modEntry.shortDesc || modEntry.desc)) {
				overrideAbilityDesc[abilityId] = (modEntry.shortDesc || modEntry.desc);
			} else if (modDescs && (baseEntry.shortDesc || baseEntry.desc) !== (modDescs.shortDesc || modDescs.desc)) {
				overrideItemDesc[abilityId] = (modDescs.shortDesc || modDescs.desc);
			}
		}

		BattleTeambuilderTable[modOnlyTablename].learnsets = moddedLearnsets;
		BattleTeambuilderTable[modOnlyTablename].overrideTier = modOnlyOverrideTier;
		BattleTeambuilderTable[modOnlyTablename].tiers = modOnlyTiers;
		BattleTeambuilderTable[modOnlyTablename].items = [['header', "Items"], ...modOnlyItems];
		BattleTeambuilderTable[modOnlyTablename].formatSlices = modOnlyFormatSlices;
		BattleTeambuilderTable[modOnlyTablename].overrideBP = overrideBP;
		BattleTeambuilderTable[modOnlyTablename].overrideAcc = overrideAcc;
		BattleTeambuilderTable[modOnlyTablename].overridePP = overridePP;
		BattleTeambuilderTable[modOnlyTablename].overrideMoveDesc = overrideMoveDesc;
		BattleTeambuilderTable[modOnlyTablename].overrideMoveType = overrideMoveType;
		BattleTeambuilderTable[modOnlyTablename].overrideMoveIsNonstandard = overrideMoveIsNonstandard;
		BattleTeambuilderTable[modOnlyTablename].overrideItemDesc = overrideItemDesc;
		BattleTeambuilderTable[modOnlyTablename].overrideAbilityDesc = overrideAbilityDesc;
		BattleTeambuilderTable[modOnlyTablename].overrideStats = {};
		BattleTeambuilderTable[modOnlyTablename].overrideType = {};
		BattleTeambuilderTable[modOnlyTablename].overrideAbility = {};
		BattleTeambuilderTable[modOnlyTablename].overrideHiddenAbility = {};
		BattleTeambuilderTable[modOnlyTablename].removeSecondAbility = {};

		BattleTeambuilderTable[natDexTablename].learnsets = moddedLearnsets;
		BattleTeambuilderTable[natDexTablename].overrideTier = natDexOverrideTier;
		BattleTeambuilderTable[natDexTablename].tiers = natDexTiers;
		BattleTeambuilderTable[natDexTablename].items = [['header', "Items"], ...natDexItems];
		BattleTeambuilderTable[natDexTablename].formatSlices = natDexFormatSlices;
		BattleTeambuilderTable[natDexTablename].overrideBP = overrideBP;
		BattleTeambuilderTable[natDexTablename].overrideAcc = overrideAcc;
		BattleTeambuilderTable[natDexTablename].overridePP = overridePP;
		BattleTeambuilderTable[natDexTablename].overrideMoveDesc = overrideMoveDesc;
		BattleTeambuilderTable[natDexTablename].overrideMoveType = overrideMoveType;
		BattleTeambuilderTable[natDexTablename].overrideMoveIsNonstandard = overrideMoveIsNonstandard;
		BattleTeambuilderTable[natDexTablename].overrideItemDesc = overrideItemDesc;
		BattleTeambuilderTable[natDexTablename].overrideAbilityDesc = overrideAbilityDesc;
		BattleTeambuilderTable[natDexTablename].overrideStats = {};
		BattleTeambuilderTable[natDexTablename].overrideType = {};
		BattleTeambuilderTable[natDexTablename].overrideAbility = {};
		BattleTeambuilderTable[natDexTablename].overrideHiddenAbility = {};
		BattleTeambuilderTable[natDexTablename].removeSecondAbility = {};
	}

	buf += `exports.BattleTeambuilderTable = JSON.parse('${JSON.stringify(BattleTeambuilderTable).replace(/['\\]/g, "\\$&")}');\n\n`;

	fs.writeFileSync('data/teambuilder-tables.js', buf);
}

console.log("DONE");

/*********************************************************
 * Build pokedex.js
 *********************************************************/

process.stdout.write("Building `data/pokedex.js`... ");

{
	const Pokedex = requireNoCache('../data/clovermon-showdown/.data-dist/pokedex.js').Pokedex;
	for (const id in Pokedex) {
		const entry = Pokedex[id];
		if (Dex.data.FormatsData[id]) {
			// console.log('formatsentry:' + id);
			const formatsEntry = Dex.data.FormatsData[id];
			if (formatsEntry.tier) entry.tier = formatsEntry.tier;
			if (formatsEntry.isNonstandard) entry.isNonstandard = formatsEntry.isNonstandard;
			if (formatsEntry.unreleasedHidden) entry.unreleasedHidden = formatsEntry.unreleasedHidden;
		}
	}
	const buf = 'exports.BattlePokedex = ' + es3stringify(Pokedex) + ';';
	fs.writeFileSync('data/pokedex.js', buf);
	fs.writeFileSync('data/pokedex.json', JSON.stringify(Pokedex));
}

console.log("DONE");

/*********************************************************
 * Build moves.js
 *********************************************************/

process.stdout.write("Building `data/moves,items,abilities,typechart,learnsets.js`...");

{
	const Moves = requireNoCache('../data/clovermon-showdown/.data-dist/moves.js').Moves;
	for (const id in Moves) {
		const move = Dex.moves.get(Moves[id].name);
		if (move.desc) Moves[id].desc = move.desc;
		if (move.shortDesc) Moves[id].shortDesc = move.shortDesc;
	}
	const buf = 'exports.BattleMovedex = ' + es3stringify(Moves) + ';';
	fs.writeFileSync('data/moves.js', buf);
	fs.writeFileSync('data/moves.json', JSON.stringify(Moves));
}

/*********************************************************
 * Build items.js
 *********************************************************/

{
	const Items = requireNoCache('../data/clovermon-showdown/.data-dist/items.js').Items;
	for (const id in Items) {
		const item = Dex.items.get(Items[id].name);
		if (item.desc) Items[id].desc = item.desc;
		if (item.shortDesc) Items[id].shortDesc = item.shortDesc;
	}
	const buf = 'exports.BattleItems = ' + es3stringify(Items) + ';';
	fs.writeFileSync('data/items.js', buf);
	fs.writeFileSync('data/items.json', JSON.stringify(Items));
}

/*********************************************************
 * Build abilities.js
 *********************************************************/

{
	const Abilities = requireNoCache('../data/clovermon-showdown/.data-dist/abilities.js').Abilities;
	for (const id in Abilities) {
		const ability = Dex.abilities.get(Abilities[id].name);
		if (ability.desc) Abilities[id].desc = ability.desc;
		if (ability.shortDesc) Abilities[id].shortDesc = ability.shortDesc;
	}
	const buf = 'exports.BattleAbilities = ' + es3stringify(Abilities) + ';';
	fs.writeFileSync('data/abilities.js', buf);
	fs.writeFileSync('data/abilities.json', JSON.stringify(Abilities));
}

/*********************************************************
 * Build typechart.js
 *********************************************************/

{
	const TypeChart = requireNoCache('../data/clovermon-showdown/.data-dist/typechart.js').TypeChart;
	const buf = 'exports.BattleTypeChart = ' + es3stringify(TypeChart) + ';';
	fs.writeFileSync('data/typechart.js', buf);
	fs.writeFileSync('data/typechart.json', JSON.stringify(TypeChart));
}

/*********************************************************
 * Build aliases.js
 *********************************************************/

{
	const Aliases = requireNoCache('../data/clovermon-showdown/.data-dist/aliases.js').Aliases;
	const buf = 'exports.BattleAliases = ' + es3stringify(Aliases) + ';';
	fs.writeFileSync('data/aliases.js', buf);
	fs.writeFileSync('data/aliases.json', JSON.stringify(Aliases));
}

/*********************************************************
 * Build formats-data.js
 *********************************************************/

{
	const FormatsData = requireNoCache('../data/clovermon-showdown/.data-dist/formats-data.js').FormatsData;
	const buf = 'exports.BattleFormatsData = ' + es3stringify(FormatsData) + ';';
	fs.writeFileSync('data/formats-data.js', buf);
	fs.writeFileSync('data/formats-data.json', JSON.stringify(FormatsData));
}

/*********************************************************
 * Build formats.js
 *********************************************************/

{
	const Formats = requireNoCache('../data/clovermon-showdown/.config-dist/formats.js').Formats;
	const buf = 'exports.Formats = ' + es3stringify(Formats) + ';';
	fs.writeFileSync('data/formats.js', buf);
	fs.writeFileSync('data/formats.json', JSON.stringify(Formats));
}

/*********************************************************
 * Build learnsets.js
 *********************************************************/

{
	const Learnsets = requireNoCache('../data/clovermon-showdown/.data-dist/learnsets.js').Learnsets;
	const buf = 'exports.BattleLearnsets = ' + es3stringify(Learnsets) + ';';
	fs.writeFileSync('data/learnsets.js', buf);
	fs.writeFileSync('data/learnsets.json', JSON.stringify(Learnsets));
}

/*********************************************************
 * Build text.js
 *********************************************************/

{
	const textData = Dex.loadTextData();
	const Text = textData.Default;

	function assignData(id, entry) {
		for (const key in entry) {
			if (['name', 'desc', 'shortDesc'].includes(key)) continue;
			const textEntry = Text[id] || (Text[id] = {});
			if (key.startsWith('gen')) {
				for (const modKey in entry[key]) {
					if (['desc', 'shortDesc'].includes(key)) continue;
					textEntry[modKey + 'Gen' + key.charAt(3)] = entry[key][modKey];
				}
			} else {
				textEntry[key] = entry[key];
			}
		}
	}

	for (const id in textData.Moves) assignData(id, textData.Moves[id]);
	for (const id in textData.Abilities) assignData(id, textData.Abilities[id]);
	for (const id in textData.Items) assignData(id, textData.Items[id]);

	const buf = 'exports.BattleText = ' + es3stringify(Text) + ';';
	fs.writeFileSync('data/text.js', buf);
	fs.writeFileSync('data/text.json', JSON.stringify(Text));
}

console.log("DONE");
